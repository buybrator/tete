<context>
# Overview  
TradeChat은 Solana 블록체인과 실시간 채팅을 결합한 혁신적인 탈중앙화 트레이딩 플랫폼입니다. 

**현재 상태**: 프론트엔드 UI/UX 및 기본 구조는 완성되었으며, Mock 데이터로 동작하고 있습니다. 이제 실제 백엔드 시스템과 블록체인 통합이 필요한 단계입니다.

**구현 목표**: Mock 구현을 실제 Supabase + Solana 블록체인으로 교체하여 완전히 동작하는 제품을 완성합니다.

# 이미 완성된 기능들 (Frontend)
## ✅ UI/UX 컴포넌트 완료
- **Neobrutalism 디자인 시스템**: 40+ 컴포넌트 라이브러리 완성
- **반응형 레이아웃**: Desktop/Mobile 최적화 완료
- **핵심 컴포넌트**: Navbar, ChatArea, TradeSettingsPanel, MobilePutter, ChatBubble, ChatInput
- **기본 인프라**: Next.js 15 + TypeScript + React 19 설정 완료

## ✅ Mock 구현 완료
- **지갑 연결**: useWallet 훅으로 Mock 지갑 상태 관리
- **채팅 시스템**: useChat 훅으로 Mock 채팅방/메시지 관리  
- **거래 설정**: useTrade 훅으로 Mock 거래 기능
- **타입 정의**: 완전한 TypeScript 인터페이스 (112줄)

# 실제 구현 필요 작업 (Backend Integration)
</context>

<PRD>
# Technical Architecture (실제 구현)
## 구현해야 할 백엔드 시스템
- **Database**: Supabase PostgreSQL (사용자, 채팅방, 메시지 관리)
- **Authentication**: Supabase Web3 Auth (지갑 기반 인증)
- **Blockchain**: Solana Web3.js (실제 트랜잭션 처리)
- **Real-time**: Solana WebSocket RPC + Supabase Realtime

## Supported Trading Protocols
TradeChat에서 지원하는 매수/매도 프로토콜들입니다. 사용자는 이러한 프로토콜을 통해 토큰을 거래하고, 해당 정보를 채팅에서 공유할 수 있습니다.

### Token Launch Platforms
- **Pump**: Solana의 대표적인 토큰 런치 플랫폼
- **LaunchLab**: 토큰 런칭 및 초기 유동성 제공 서비스
- **Launch a Coin**: 간편한 토큰 생성 및 런칭 플랫폼
- **Boop**: 커뮤니티 기반 토큰 런치 플랫폼
- **Moonshot**: 밈코인 및 초기 프로젝트 런칭 플랫폼

### AMM (Automated Market Maker) Protocols
- **Raydium**: Solana 최대 규모의 AMM 및 DEX 플랫폼
- **Pump AMM**: Pump 플랫폼과 연동된 AMM 서비스
- **Meteora AMM**: 차세대 동적 유동성 풀 AMM
- **Meteora AMM V2**: 개선된 버전의 Meteora AMM 프로토콜

### DeFi Protocols
- **Bonk**: Solana 생태계의 커뮤니티 토큰 및 DeFi 서비스
- **Dynamic BC**: 동적 본딩 커브를 활용한 토큰 거래 프로토콜

### 구현 계획
1. **프로토콜 감지**: 메모 메시지에서 사용된 프로토콜 자동 식별
2. **가격 정보 연동**: 각 프로토콜의 API를 통한 실시간 가격 정보 수집
3. **거래 링크**: 사용자가 직접 해당 프로토콜로 이동할 수 있는 링크 제공
4. **통계 정보**: 프로토콜별 거래량 및 인기도 표시

### 메모 포맷 확장
```
기본 포맷: "BUY:SOL:100@1.5"
프로토콜 포함: "BUY:SOL:100@1.5:RAYDIUM"
```

## Database Schema 구현
### Supabase 테이블 설계
```sql
-- 사용자 프로필 테이블
CREATE TABLE profiles (
  wallet_address TEXT PRIMARY KEY,
  nickname TEXT UNIQUE NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- 채팅방 테이블  
CREATE TABLE chat_rooms (
  token_address TEXT PRIMARY KEY,
  room_name TEXT NOT NULL,
  creator_wallet TEXT REFERENCES profiles(wallet_address),
  creation_tx_signature TEXT UNIQUE NOT NULL,
  created_at TIMESTAMP DEFAULT NOW()
);

-- 메시지 캐시 테이블 (성능 최적화용)
CREATE TABLE message_cache (
  signature TEXT PRIMARY KEY,
  token_address TEXT REFERENCES chat_rooms(token_address),
  sender_wallet TEXT,
  message_type TEXT CHECK (message_type IN ('BUY', 'SELL', 'CHAT')),
  content TEXT NOT NULL,
  quantity DECIMAL,
  price DECIMAL,
  protocol TEXT, -- 사용된 거래 프로토콜 (RAYDIUM, PUMP, METEORA 등)
  block_time TIMESTAMP,
  processed_at TIMESTAMP DEFAULT NOW()
);
```

## API 엔드포인트 구현
### Supabase Edge Functions
```typescript
// 방 생성 검증 함수
POST /functions/v1/verify-room-creation
{
  tokenAddress: string;
  creatorWallet: string; 
  txSignature: string;
}

// 메시지 파싱 및 저장 함수  
POST /functions/v1/process-memo-message
{
  signature: string;
  memo: string;
  sender: string;
  blockTime: number;
}
```

# Development Roadmap (백엔드 중심 - 20일)

## Week 1: Authentication & Database (5일)
### Day 1-2: Supabase 프로젝트 설정
- **Supabase 프로젝트 생성**: Production 환경 설정
- **환경 변수 구성**: SUPABASE_URL, SUPABASE_ANON_KEY, SUPABASE_SERVICE_KEY
- **Database 스키마 생성**: profiles, chat_rooms, message_cache 테이블
- **RLS (Row Level Security) 설정**: 보안 정책 구현

### Day 3-4: Web3 인증 시스템
- **Supabase Auth 설정**: Web3 Provider 연동
- **useWallet 훅 업데이트**: Mock → 실제 Phantom/Solflare 연결
- **JWT 토큰 관리**: 지갑 서명 기반 세션 생성
- **자동 로그인**: localStorage 토큰 검증 및 갱신

### Day 5: 사용자 프로필 시스템
- **닉네임 등록**: profiles 테이블 연동
- **중복 검사**: 실시간 닉네임 유효성 검증  
- **프로필 CRUD**: 생성/조회/수정 API 연동

## Week 2: Solana Integration (5일)
### Day 6-7: 기본 블록체인 연결
- **Web3.js 설정**: Mainnet/Devnet RPC 연결
- **지갑 어댑터**: @solana/wallet-adapter 실제 구현
- **트랜잭션 전송**: Memo Program 연동
- **서명 검증**: 사용자 지갑 서명 확인

### Day 8-9: Memo Program 통합
- **메모 포맷 정의**: "BUY:SOL:100@1.5" 또는 "BUY:SOL:100@1.5:RAYDIUM" 형식 표준화
- **프로토콜 파싱**: 메모에서 거래 프로토콜 정보 추출 및 검증
- **트랜잭션 생성**: 매수/매도 의향을 메모로 변환 (프로토콜 정보 포함)
- **전송 처리**: 지갑 승인 → 블록체인 전송 → 확인 대기
- **에러 처리**: 실패 시 재시도 및 사용자 알림

### Day 10: 과거 메시지 조회
- **getSignaturesForAddress**: 특정 지갑의 과거 트랜잭션 조회
- **메모 필터링**: Memo Program 트랜잭션만 추출
- **메시지 파싱**: 메모 내용을 구조화된 데이터로 변환
- **캐싱 시스템**: message_cache 테이블에 저장

## Week 3: Real-time System (5일)  
### Day 11-12: WebSocket 실시간 수신
- **Solana WebSocket**: RPC 로그 구독 설정
- **메시지 리스너**: 새 Memo 트랜잭션 실시간 감지
- **자동 파싱**: 실시간 메모 → 채팅 메시지 변환
- **상태 동기화**: useChat 훅에서 실시간 메시지 반영

### Day 13-14: Supabase Realtime 연동
- **채널 구독**: 토큰별 실시간 채널 생성
- **메시지 브로드캐스트**: 새 메시지 모든 참여자에게 전송
- **동시성 처리**: 여러 사용자 동시 메시지 처리
- **연결 관리**: 자동 재연결 및 오프라인 처리

### Day 15: 성능 최적화
- **메시지 페이지네이션**: 대량 메시지 효율적 로딩
- **가상화**: React Window로 렌더링 성능 향상
- **RPC 최적화**: 불필요한 호출 최소화
- **로컬 캐싱**: 메시지 임시 저장 전략

## Week 4: Room Management (5일)
### Day 16-17: 채팅방 생성 시스템
- **방 생성 UI 연동**: Mock → 실제 트랜잭션 처리
- **0.1 SOL 지불**: 방 생성 비용 트랜잭션 구현
- **토큰 주소 검증**: Solana 토큰 메타데이터 조회
- **Edge Function**: 트랜잭션 검증 후 DB 등록

### Day 18: 방 목록 및 검색
- **실시간 방 목록**: chat_rooms 테이블 연동
- **검색 기능**: 토큰 이름/주소로 방 찾기
- **참여자 수**: 실시간 활성 사용자 카운트
- **방 상태**: 생성 중/활성/비활성 상태 관리

### Day 19: 통합 테스트
- **End-to-End 테스트**: 전체 플로우 검증
- **성능 테스트**: 동시 사용자 부하 테스트
- **블록체인 테스트**: Devnet 완전 동작 확인
- **버그 수정**: 발견된 이슈 해결

### Day 20: 배포 및 모니터링
- **환경 변수**: Production 설정 적용
- **Mainnet 배포**: 실제 Solana 네트워크 연결
- **모니터링**: 로그 수집 및 에러 추적 설정
- **문서화**: API 문서 및 사용자 가이드

# Technical Implementation Details

## useWallet 훅 업데이트 (Mock → Real)
```typescript
// 현재: Mock 구현
const useWallet = () => {
  // ... mock data
  return { isConnected: true, publicKey: "mock" };
};

// 목표: 실제 구현
const useWallet = () => {
  const { connection } = useConnection();
  const { publicKey, signMessage } = useWalletAdapter();
  
  const login = async () => {
    const message = `Login to TradeChat: ${Date.now()}`;
    const signature = await signMessage(message);
    const { data, error } = await supabase.auth.signInWithCustomToken({
      token: jwt.sign({ publicKey, signature }, process.env.JWT_SECRET)
    });
  };
};
```

## useChat 훅 업데이트 (Mock → Real)
```typescript
// 현재: Mock 데이터
const useChat = () => {
  return { rooms: mockRooms, messages: mockMessages };
};

// 목표: 실제 블록체인 연동
const useChat = () => {
  const subscribeToMessages = (tokenAddress: string) => {
    // Solana WebSocket 구독
    connection.onLogs(
      { mentions: [MEMO_PROGRAM_ID] },
      (logs) => parseMemoAndUpdateMessages(logs)
    );
  };
  
  const sendMessage = async (content: string, type: 'BUY' | 'SELL', protocol?: string) => {
    const memo = protocol 
      ? `${type}:${tokenAddress}:${content}:${protocol}`
      : `${type}:${tokenAddress}:${content}`;
      
    const transaction = new Transaction().add(
      new TransactionInstruction({
        programId: MEMO_PROGRAM_ID,
        keys: [],
        data: Buffer.from(memo)
      })
    );
    await sendTransaction(transaction);
  };
};
```

# Critical Implementation Points

## 1. 실시간 성능 보장
- **WebSocket 안정성**: 자동 재연결 + Heartbeat
- **메시지 순서**: 블록타임 기준 정렬
- **중복 방지**: 트랜잭션 시그니처 중복 체크

## 2. 보안 및 검증
- **지갑 서명 검증**: 모든 요청에 서명 확인
- **RLS 정책**: 데이터베이스 접근 권한 제한
- **입력 검증**: SQL Injection, XSS 방지

## 3. 사용자 경험
- **로딩 상태**: 블록체인 트랜잭션 대기 시간 안내
- **에러 핸들링**: 명확한 에러 메시지 및 복구 가이드
- **오프라인 모드**: 네트워크 끊김 시 기본 동작

# Dependencies & Environment
## 추가 필요한 패키지
```json
{
  "@supabase/supabase-js": "^2.38.5",
  "@solana/web3.js": "^1.87.6", 
  "@solana/wallet-adapter-react": "^0.15.32",
  "@solana/wallet-adapter-phantom": "^0.9.24",
  "jsonwebtoken": "^9.0.2"
}
```

## 환경 변수 (Production)
```env
# Supabase
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_KEY=your-service-key

# Solana
NEXT_PUBLIC_SOLANA_RPC_URL=https://api.mainnet-beta.solana.com
NEXT_PUBLIC_MEMO_PROGRAM_ID=MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr

# Auth  
JWT_SECRET=your-jwt-secret
```

# Success Metrics
## 기술적 목표 (20일 후)
- ✅ **지갑 인증**: Phantom 지갑으로 실제 로그인
- ✅ **메시지 전송**: 실제 Solana 트랜잭션으로 메시지 전송
- ✅ **실시간 수신**: WebSocket으로 즉시 메시지 수신
- ✅ **방 생성**: 0.1 SOL 지불 후 새 방 생성
- ✅ **과거 조회**: 블록체인에서 이전 메시지 불러오기

## 성능 목표
- **메시지 지연**: < 2초 (블록체인 특성상)
- **동시 사용자**: 100명+ 동시 접속 지원
- **업타임**: 99%+ 서비스 가용성
- **트랜잭션 성공률**: 95%+ (네트워크 상황 고려)
</PRD> 